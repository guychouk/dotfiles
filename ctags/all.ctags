###############################################################################
# Global exclusions
###############################################################################

--exclude=*.min.*
--exclude=*.spec.*
--exclude=*.test.*
--exclude=*.tar.*
--exclude=*.bundle.*
--exclude=.bak
--exclude=.cache
--exclude=.class
--exclude=.csproj
--exclude=.csproj.user
--exclude=.dll
--exclude=.map
--exclude=.pdb
--exclude=.pyc
--exclude=.sln
--exclude=.swp
--exclude=.tmp
--exclude=coverage
--exclude=cscope.*
--exclude=dist
--exclude=min
--exclude=tags
--exclude=package.json
--exclude=package-lock.json
--exclude=.mypy_cache

###############################################################################
# Map .tsx files to TypeScript
###############################################################################

--langmap=TypeScript:+.tsx

###############################################################################
#                   T Y P E S C R I P T   R E G E X E S
###############################################################################

#------------------------------------------------------------------------------
# Top-level or standalone functions (including async variants)
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*function[ \t]*\([A-Za-z0-9_$]\{1,\}\)[ \t(]/\1/f,function/b
# function myFunc(...) { ... }

--regex-typescript=/^[ \t]*[(]function[ \t]*\([A-Za-z0-9_$]\{1,\}\)[ \t(]/\1/f,function/b
# (function myFunc(...) { ... })

--regex-typescript=/^[ \t]*async[ \t]*\([A-Za-z0-9_$]\{1,\}\)[ \t(]/\1/f,function/b
# async function myFunc(...) { ... }
# but capturing the form: async (myFunc) ... if you wrote it that way

--regex-typescript=/^[ \t]*async[ \t]function[ \t]*\([A-Za-z0-9_$]\{1,\}\)[ \t(]/\1/f,function/b
# async function myFunc(...) { ... }

--regex-typescript=/^[ \t]*[(]async[ \t]function[ \t]*\([A-Za-z0-9_$]\{1,\}\)[ \t(]/\1/f,function/b
# (async function myFunc(...) { ... })

#------------------------------------------------------------------------------
#  Variable declarations that reference (async) functions or arrow functions
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*(var|let|const)[ \t]\{1,\}\([A-Za-z0-9_$]\{1,\}\)[ \t]*=[ \t]*\(async[ \t]\{1,\}\)*function[^\*][^\*]/\1/f,function/b
# const myFunc = async function (...) { ... }

#------------------------------------------------------------------------------
# Class declarations
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*(export([ \t]+abstract)?([ \t]+default)?)?[ \t]*class[ \t]+([a-zA-Z0-9_]+)/\4/c,class/
# export class MyClass { ... } or abstract class, default class, etc.

#------------------------------------------------------------------------------
# Methods (regular or async) inside classes/objects
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*\([A-Za-z0-9_$]\+\)[ \t]*:[ \t]*\(async[ \t]*\)\?[ \t]*[(]/\1/m,method,methods/b
# myMethod: async(...) or myMethod: (...)

--regex-typescript=/^[ \t]*\([A-Za-z0-9_$]\{1,\}\)[ \t]*=[ \t]*\(async[ \t]*\)\?[ \t]*[(]/\1/m,method,methods/b
# myMethod = async(...) or myMethod = (...)

--regex-typescript=/^[ \t]*(export)?[ \t]*(public|protected|private)[ \t]+(static)?[ \t]*([a-zA-Z0-9_]+)/\4/m,method/
# public myMethod(...), private static myMethod(...), etc.

#------------------------------------------------------------------------------
# Namespaces & modules
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*(declare)?[ \t]*namespace[ \t]+([a-zA-Z0-9_]+)/\2/n,namespace/
# declare namespace MyNamespace { ... }

--regex-typescript=/^[ \t]*(export)?[ \t]*module[ \t]+([a-zA-Z0-9_]+)/\2/M,modules/
# export module MyModule { ... }

#------------------------------------------------------------------------------
# Exported functions
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*(export)?[ \t]*function[ \t]+([a-zA-Z0-9_]+)/\2/f,function/
# export function doSomething() { ... }

#------------------------------------------------------------------------------
# Variables (exported or not)
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*export[ \t]+(var|let|const)[ \t]+([a-zA-Z0-9_]+)/\2/v,variable/
# export const MY_VAR = 123

#------------------------------------------------------------------------------
# Interfaces
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*(export)?[ \t]*interface[ \t]+([a-zA-Z0-9_]+)/\2/i,interface/
# export interface MyInterface { ... }

#------------------------------------------------------------------------------
# Type aliases
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*(export)?[ \t]*type[ \t]+([a-zA-Z0-9_]+)/\2/t,types/
# export type MyType = ...

#------------------------------------------------------------------------------
# Enums
#------------------------------------------------------------------------------
--regex-typescript=/^[ \t]*(export)?[ \t]*enum[ \t]+([a-zA-Z0-9_]+)/\2/e,enumerator/
# export enum MyEnum { ... }

###############################################################################
#                   J A V A S C R I P T   R E G E X E S
###############################################################################

#------------------------------------------------------------------------------
# "varName: function" or "varName: async function" style
#------------------------------------------------------------------------------
--regex-javascript=/^[ \t]*([A-Za-z_$][A-Za-z0-9_$]*)[ \t]*:[ \t]*function/\1/f,function/
--regex-javascript=/^[ \t]*([A-Za-z_$][A-Za-z0-9_$]*)[ \t]*:[ \t]*(async[ \t]*)?\(/\1/f,function/
# myFunc: function(...) { ... } or myFunc: async(...) => { ... }

#------------------------------------------------------------------------------
# Standard named function declarations
#------------------------------------------------------------------------------
--regex-javascript=/^[ \t]*function[ \t]+([A-Za-z_$][A-Za-z0-9_$]*)[ \t]*\(/\1/f,function/
# function myFunc(...) { ... }

#------------------------------------------------------------------------------
# Const, let, var assigned to function expressions (arrow or otherwise)
#------------------------------------------------------------------------------
--regex-javascript=/^[ \t]*const[ \t]+([A-Za-z_$][A-Za-z0-9_$]*)[ \t]*=[ \t]*\(/\1/f,function/
--regex-javascript=/^[ \t]*let[ \t]+([A-Za-z_$][A-Za-z0-9_$]*)[ \t]*=[ \t]*\(/\1/f,function/
--regex-javascript=/^[ \t]*var[ \t]+([A-Za-z_$][A-Za-z0-9_$]*)[ \t]*=[ \t]*\(/\1/f,function/
# const myFunc = function(...) { ... } or arrow variants

#------------------------------------------------------------------------------
# Class declarations in JavaScript
#------------------------------------------------------------------------------
--regex-javascript=/^[ \t]*class[ \t]+([A-Za-z_$][A-Za-z0-9_$]*)/\1/c,class/
# class MyClass { ... }
