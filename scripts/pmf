#!/usr/bin/env zsh

# pmf - Process Manager with Fzf
#
# A simple process manager that uses fzf to interact with predefined commands.
# Usage: pmf <processes_file>
#
# The processes file should contain a list of processes to manage.
# Each line should be in the format: <name>="<command>"
# You can also use the 'autostart' prefix to automatically start a process when pmf is launched.
#
# Example:
# autostart my_process="echo 'Hello, World!'"
# my_server="python -m http.server 8000"
#
# Author: guychouk
# Dependencies: fzf

set -e

if [ -n "$BASH_VERSION" ]; then
    declare -A processes
    declare -A autostart_processes
elif [ -n "$ZSH_VERSION" ]; then
    typeset -A processes
    typeset -A autostart_processes
else
    echo "Unsupported shell. Use Bash or Zsh."
    exit 1
fi

trap 'echo "Process was interrupted."; cleanup' SIGINT
trap 'cleanup' EXIT

load_commands() {
    while IFS='=' read -r name command; do
        # Check if the line starts with 'autostart'
        if [[ $name == autostart* ]]; then
            name=${name#autostart }  # Remove 'autostart ' prefix
            autostart_processes["$name"]=$command
        fi
        processes["$name"]=$command
    done < "$1"
}

start_all_autostart_processes() {
    for process_name in $(get_keys autostart_processes); do
        start_process "$process_name"
    done
}

start_process() {
    local process_name="$1"
    local process_command="${processes["$process_name"]}"
    local log_file="/tmp/$process_name.log"
    local pid_file="/tmp/$process_name.pid"

    if [[ -f $pid_file ]] && kill -0 $(cat "$pid_file") 2>/dev/null; then
        echo "$process_name is already running with PID $(cat $pid_file)."
        return
    fi

    echo "Starting $process_name..."
    eval "$process_command" > "$log_file" 2>&1 &
    echo $! > "$pid_file"
}

stop_process() {
    local process_name="$1"
    local pid_file="/tmp/$process_name.pid"

    if [[ -f $pid_file ]] && kill -0 $(cat "$pid_file") 2>/dev/null; then
        echo "Stopping $process_name with PID $(cat $pid_file)..."
        kill $(cat "$pid_file")
        rm -f "$pid_file"
    fi
}

get_keys() {
    local array_name=$1

    if [ -n "$BASH_VERSION" ]; then
        eval "echo \${!$array_name[@]}"
    elif [ -n "$ZSH_VERSION" ]; then
        eval "echo \${(k)$array_name}"
    fi
}

cleanup() {
    for process_name in $(get_keys processes); do
        stop_process "$process_name"
    done
}

list_procs() {
    printf "%s\n" $(get_keys processes) | fzf --height=80% --layout=reverse --prompt="Select a process to manage: " \
        --preview='echo "${processes[$(echo {})]}" && tail -n 10 /tmp/{}.log 2>/dev/null || echo "No logs found."' \
        --preview-window=down:70% \
        --bind space:refresh-preview
}

# Select action using fzf
select_action() {
    echo -e "start\nrestart\nstop\nkill\nstatus\nlogs" | fzf --height=70% --reverse --prompt="Choose action: "
}

# Handle selected action
handle_action() {
    local selected_process="$1"
    local selected_action="$2"
    local process_command="${processes["$selected_process"]}"
    local log_file="/tmp/$selected_process.log"
    local pid_file="/tmp/$selected_process.pid"

    case $selected_action in
        start)
            start_process "$selected_process"
            ;;
        restart)
            stop_process "$selected_process"
            start_process "$selected_process"
            ;;
        stop)
            stop_process "$selected_process"
            ;;
        kill)
            stop_process "$selected_process"
            ;;
        status)
            if [[ -f $pid_file ]] && kill -0 $(cat "$pid_file") 2>/dev/null; then
                echo "$selected_process is running with PID $(cat $pid_file)."
            else
                echo "$selected_process is not running."
            fi
            ;;
        logs)
            if [[ ! -f /tmp/"$selected_process".log ]]; then
                echo "No logs found for $selected_process."
                return
            fi
            less -R $log_file
            ;;
        *)
            ;;
    esac
}

main_menu() {
    while true; do
        local process_choice=$(list_procs)
        if [[ -n $process_choice ]]; then
            local action_choice=$(select_action)
            handle_action "$process_choice" "$action_choice"
        else
            break
        fi
    done
}

if [ "$#" -ne 1 ]; then
    echo "Usage: pmf <processes_file>"
    exit 1
fi

load_commands "$1"
start_all_autostart_processes
main_menu
