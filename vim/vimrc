" Options {{{
set nocompatible
set encoding=utf-8
set autoindent
set autoread
set backspace=indent,eol,start
set completeopt=menuone,preview
set display=lastline
set expandtab
set foldmethod=syntax
set ignorecase
set noinfercase
set incsearch
set smartcase
set keywordprg=:help
set laststatus=2
set linebreak
set mouse=a
set cursorline
set cursorlineopt=number
set nohlsearch
set nojoinspaces
set noruler
set noshowcmd
set noshowmode
set noswapfile
set viminfofile=$XDG_CACHE_HOME/viminfo
set title
set titlestring=%<%F
set nowrap
set number
set scrolloff=999
set shiftround
set shiftwidth=2
set shortmess=aoOstTIcF
set sidescroll=1
set sidescrolloff=2
set signcolumn=yes
set smarttab
set softtabstop=2
set tabstop=2
set tags=./tags;,tags;
set undodir=~/.vim/tmp/undo
set undofile
set undolevels=10000
set updatetime=100
set history=1000
set wildmenu
set wildignorecase
set wildignore+=.DS_Store,Icon\?,*.dmg,*.git,*.pyc,*.o,*.obj,*.so,*.swp,*.zip
set belloff=all
set formatoptions+=j
set complete-=i
set viewoptions-=options
set sessionoptions-=options
set nrformats=bin,hex,blank
set ttimeout
set ttimeoutlen=100
set nolangremap
set path+=**
set t_vb=
set noerrorbells
set noequalalways
if has('macunix')
  set clipboard=unnamed
elseif has('unix')
  set clipboard=unnamedplus
endif

" Disable netrw before calling filetype
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1

filetype plugin indent on
" }}}

" Functions {{{
function! s:FzfSelectSitePackagesDir()
  let l:cmd = 'find $(python -c "import site; print(site.getsitepackages()[0])") -mindepth 1 -maxdepth 1 -type d'
  call fzf#run(fzf#wrap({
        \ 'source': l:cmd,
        \ 'sink': function('s:OpenDirInNewTab'),
        \ 'options': '--prompt="site_packages> "'
        \ }))
endfunction

function! s:FzfSelectNodeModulesDir()
  let l:cmd = 'find node_modules -mindepth 1 -maxdepth 1 -type d'
  call fzf#run(fzf#wrap({
        \ 'source': l:cmd,
        \ 'sink': function('s:OpenDirInNewTab'),
        \ 'options': '--prompt="node_modules> "'
        \ }))
endfunction

function! s:OpenDirInNewTab(selected)
  execute 'tabnew'
  execute 'edit ' . fnameescape(a:selected)
  execute 'tcd '  . fnameescape(a:selected)
  execute '!ctags -R .'
endfunction

fun! s:Highlight()
  redir @a | highlight | redir END | new | put a
endf

fun! s:CleanUndoFiles()
  !find ~/.vim/tmp/undo -type f -mtime +100d \! -name '.gitignore' -delete
endf

fun! s:ZoomToggle() abort
  if exists('t:zoomed') && t:zoomed
    execute t:zoom_winrestcmd
    let t:zoomed = 0
  else
    let t:zoom_winrestcmd = winrestcmd()
    resize
    vertical resize
    let t:zoomed = 1
  endif
endf

fun! s:AddOpenBuffersToList()
  let qf_list = map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), '{"bufnr": v:val}')
  call setqflist(qf_list)
  copen
endf

fun! s:RemoveQfItem()
  let curqfidx = line('.') - 1
  let qfall = getqflist()
  call remove(qfall, curqfidx)
  call setqflist(qfall, 'r')
  execute curqfidx + 1 . "cfirst"
  :copen
endf

" http://ddrscott.github.io/blog/2016/vim-toggle-movement/
fun! s:ToggleMovement(firstOp, thenOp)
  let pos = getpos('.')
  execute "normal! " . a:firstOp
  if pos == getpos('.')
    execute "normal! " . a:thenOp
  endif
endf

function! s:WinMoveOrSplit(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr())
    if (match(a:key,'[jk]'))
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

fun! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endf

fun! s:view_git_history() abort
  Git difftool --name-only ! !^@
  call s:diff_current_quickfix_entry()
  " Bind <CR> for current quickfix window to properly set up diff split layout after selecting an item
  " There's probably a better way to map this without changing the window
  copen
  nnoremap <buffer> <CR> <CR><BAR>:call <sid>diff_current_quickfix_entry()<CR>
  wincmd p
endf

fun! s:diff_current_quickfix_entry() abort
  " Cleanup windows
  for window in getwininfo()
    if window.winnr !=? winnr() && bufname(window.bufnr) =~? '^fugitive:'
      exe 'bdelete' window.bufnr
    endif
  endfor
  cc
  call s:add_mappings()
  let qf = getqflist({'context': 0, 'idx': 0})
  if get(qf, 'idx') && type(get(qf, 'context')) == type({}) && type(get(qf.context, 'items')) == type([])
    let diff = get(qf.context.items[qf.idx - 1], 'diff', [])
    echom string(reverse(range(len(diff))))
    for i in reverse(range(len(diff)))
      exe (i ? 'leftabove' : 'rightbelow') 'vert diffsplit' fnameescape(diff[i].filename)
      call s:add_mappings()
    endfor
  endif
endf

fun! s:add_mappings() abort
  nnoremap <buffer>]q :cnext <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  nnoremap <buffer>[q :cprevious <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  " Reset quickfix height. Sometimes it messes up after selecting another item
  11copen
  wincmd p
endf

fun! MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " Select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif
    " Set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'
    " Get the buffer list and window number for the tab page
    let buflist = tabpagebuflist(i + 1)
    let winnr = tabpagewinnr(i + 1)
    " Append the filename (without path)
    let name = fnamemodify(bufname(buflist[winnr - 1]), ':t')
    if empty(name)
      let s .= ' ? '
    else
      let s .= ' ' . name . ' '
    endif
  endfor
  " Fill the rest of the tabline
  let s .= '%#TabLineFill#%T'
  return s
endf

fun! s:OpenGodotDocs()
  let l:cmd = 'find ~/opt/godot-docs -type f -name "*.html"'
  call fzf#run(fzf#wrap({
        \ 'source': l:cmd,
        \ 'sink': function('s:OsOpenSelection'),
        \ 'options': '--prompt="Godot Docs> "'
        \ }))
endfunction

fun! s:OsOpenSelection(selected)
  let l:cmd = 'open ' . fnameescape(a:selected)
  call system(l:cmd)
endfunction

function! GrepMotion(type)
    if a:type ==# 'char'
        normal! `[v`]y
    elseif a:type ==# 'line'
        normal! `[V`]y
    elseif a:type ==# 'block'
        normal! `[\<C-v>`]y
    endif
    let text = escape(@", '"\')
    execute 'grep "' . text . '"'
endfunction
" }}}

" Appearance {{{
syntax enable

set list
set cmdheight=1
set tabline=%!MyTabLine()

if has('termguicolors') && $COLORTERM ==# 'truecolor'
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

let &showbreak='└ '
let &fillchars='eob: '
let &listchars='tab:⋮ ,trail:·,extends:>,precedes:<,nbsp:+'
let &t_SI="\e[5 q"
let &t_SR="\e[4 q"
let &t_EI="\e[2 q"

colorscheme gman
" }}}

" Mappings {{{
let mapleader = "\<Space>"
let maplocalleader = ","

" Window Management
nnoremap <silent> <C-w>h                :call <SID>WinMoveOrSplit('h')<CR>
nnoremap <silent> <C-w>j                :call <SID>WinMoveOrSplit('j')<CR>
nnoremap <silent> <C-w>k                :call <SID>WinMoveOrSplit('k')<CR>
nnoremap <silent> <C-w>l                :call <SID>WinMoveOrSplit('l')<CR>
nnoremap <silent> <C-A-h>               :vertical resize -5<CR>
nnoremap <silent> <C-A-j>               :resize +5<CR>
nnoremap <silent> <C-A-k>               :resize -5<CR>
nnoremap <silent> <C-A-l>               :vertical resize +5<CR>
nnoremap <silent> yoz                   :ZoomToggle<CR>

" The rest
nnoremap          j                     gj
nnoremap          k                     gk
nnoremap          Q                     :qa<CR>
nnoremap          Y                     y$
nnoremap          R                     :%s//g<Left><Left>
nnoremap          H                     gT
nnoremap          L                     gt
nnoremap <silent> c*                    /\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgn
nnoremap <silent> c#                    ?\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgN
nnoremap <silent> d*                    /\<<C-r>=expand('<cword>')<CR>\>\C<CR>``dgn
nnoremap <silent> d#                    ?\<<C-r>=expand('<cword>')<CR>\>\C<CR>``dgN
nnoremap <silent> <C-w>{                :pclose<CR>
nnoremap <silent> <C-g>                 2<C-g>
nnoremap <silent> <C-e>                 :e#<CR>
nnoremap <silent> <leader>q             :bd<CR>
nnoremap <silent> <leader>w             :w<CR>
nnoremap          <leader>b             :buffer<Space>
nnoremap          <leader>f             :vimgrep // %<Left><Left><Left>
nnoremap          <leader>/             :grep<Space>
nnoremap          <leader>?             :grep<Space>--no-ignore-vcs<Space>
nnoremap <silent> <leader>ec            :e ~/.vim/vimrc<CR>
nnoremap <silent> <leader><C-]>         <C-w><C-]><C-w>T
nnoremap <silent> 0                     :call <SID>ToggleMovement('^', '0')<CR>
xnoremap <silent> K                     :m '<-2<CR>gv=gv
xnoremap <silent> J                     :m '>+1<CR>gv=gv
inoremap          <C-w>                 <C-g>u<C-w>
inoremap          <C-u>                 <C-g>u<C-u>
xnoremap <silent> <localleader>/        :<C-u>call GrepMotion(visualmode())<CR>
nnoremap <silent> <localleader>/        :set opfunc=GrepMotion<CR>g@
" }}}

" Plugins {{{
" Bindings {{{
nnoremap <silent> <leader>g     :Git<CR>
nnoremap <silent> <leader>o     :Files<CR>
nnoremap <silent> <leader>.     :GFiles<CR>
nnoremap <silent> <leader>r     :History:<CR>
nnoremap <silent> <leader>u     :UndotreeToggle<CR>
nnoremap <silent> <leader>s     :PicolineToggle<CR>
nnoremap <silent> <leader>cs    :call css_color#toggle()<CR>
nnoremap <silent> <leader>yf    :let @+ = expand('%:p')<CR>
nnoremap <silent> <leader>hd    :SignifyHunkDiff<CR>
nnoremap <silent> <leader>hu    :SignifyHunkUndo<CR>
nnoremap          <leader>nm    :call <SID>FzfSelectNodeModulesDir()<CR>
nnoremap          <leader>sp    :call <SID>FzfSelectSitePackagesDir()<CR>
nnoremap          <leader>pp    :Rooter<CR>
nnoremap          <leader>tb    :Tagbar<CR>
nnoremap <silent> yoc           :ContextToggle<CR>
nnoremap <silent> yol           :IndentLinesToggle<CR>
nnoremap          gz            <Plug>(characterize)
nnoremap          ga            <Plug>(EasyAlign)
xnoremap          ga            <Plug>(EasyAlign)
xnoremap <silent> <leader><Tab> <Plug>(fzf-maps-x)
onoremap <silent> <leader><Tab> <Plug>(fzf-maps-o)
inoremap <silent> <C-x><C-k>    <Plug>(fzf-complete-word)
inoremap <silent> <C-x><C-l>    <Plug>(fzf-complete-line)
inoremap <silent> <C-x><C-f>    <Plug>(fzf-complete-path)
" }}}
" Man {{{
runtime ftplugin/man.vim
" }}}
" MatchIt {{{
packadd! matchit
" }}}
" cfilter {{{
packadd! cfilter
" }}}
" comment {{{
packadd comment
" }}}
" FZF {{{
let g:fzf_colors = { 'border':  ['fg', 'FzfBorder', 'Ignore'] }
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8, 'border': 'rounded' } }
let g:fzf_preview_window = ['right:70%:hidden', 'ctrl-]']
" }}}
" Rooter {{{
let g:rooter_patterns = ['.git', 'Makefile', 'package.json', '.envrc']
let g:rooter_manual_only = 1
" }}}
" GH-Line {{{
let g:gh_line_map_default       = 0
let g:gh_line_blame_map_default = 0
let g:gh_repo_map               = '<leader><leader>go'
let g:gh_open_command           = 'fn() { echo "$@" | pbcopy; }; fn '
" }}}
" Signify {{{
let g:signify_sign_add = '▌'
let g:signify_sign_change = '▌'
let g:signify_sign_delete = '▌'
let g:signify_sign_change_delete = '∙'
" }}}
" Emmet {{{
let g:user_emmet_install_global = 0
" }}}
" indentLine {{{
let g:indentLine_fileType = ['yaml', 'yml', 'python', 'gdscript']
" }}}
" Undotree {{{
let g:undotree_DiffAutoOpen = 0
" }}}
" Dirvish {{{
let g:dirvish_mode = ':sort ,^.*[\/],'
" }}}
" Context.vim {{{
let g:context_add_mappings = 0
let g:context_highlight_tag = '<hide>'
" }}}
" vim-minisnip {{{
let g:minisnip_dir = '~/.vim/snippets'
let g:minisnip_trigger = '<C-j>'
" }}}
" }}}

" Grep {{{
if executable('rg')
  set grepprg=rg\ --vimgrep\ -g\ '!tags'\ -g\ '!.git'\ --hidden
endif
"}}}

" Commands {{{
command -nargs=0 Highlight                call <SID>Highlight()
command -nargs=0 CleanUndoFiles           call <SID>CleanUndoFiles()
command -nargs=0 QfBuffers                call <SID>AddOpenBuffersToList()
command -nargs=0 RemoveQfItem             call <SID>RemoveQfItem()
command -nargs=0 ZoomToggle               call <SID>ZoomToggle()
command -nargs=0 FzfSelectNodeModulesDir  call <SID>FzfSelectNodeModulesDir()
command -nargs=0 FzfSelectSitePackagesDir call <SID>FzfSelectSitePackagesDir()
command -nargs=0 DiffHistory              call s:view_git_history()
command -nargs=0 GodotDocs                call <SID>OpenGodotDocs()
" }}}

" Autocommands {{{

augroup appearance_settings
  autocmd!
  autocmd VimEnter     * call echoraw(&t_EI)
  autocmd CmdlineEnter * call echoraw(&t_SI)
  autocmd CmdlineLeave * call echoraw(&t_EI)
augroup END

augroup quickfix
  autocmd!
  autocmd VimEnter        *     cwindow
  autocmd QuickFixCmdPost l*    lwindow
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd FileType        qf    map <buffer> dd :RemoveQfItem<CR>
augroup END

augroup filetype_settings
  autocmd!

  " Go
  autocmd FileType go compiler go
  autocmd FileType go setlocal foldlevel=99

  " Dirvish
  autocmd FileType dirvish nmap <leader>v .kitty icat<CR>

  " Man
  autocmd FileType man setlocal hlsearch
  autocmd FileType man nmap <leader>q :q<CR>

  " Shell
  autocmd FileType sh,bash,zsh compiler shellcheck

  " C
  autocmd FileType c setlocal tabstop=4
  autocmd FileType c setlocal shiftwidth=4
  autocmd FileType c setlocal foldlevel=99

  " HTML + CSS
  autocmd FileType html,css setlocal foldlevel=99
  autocmd FileType html,css EmmetInstall

  " Fugitive
  autocmd FileType fugitive normal zR

  " Godot
  autocmd FileType   gdscript setlocal foldmethod=expr
  autocmd FileType   gdscript let      g:godot_executable = '/Applications/Godot.app/Contents/MacOS/Godot --position 500,0'
  autocmd FileType   gdscript map <buffer> <F8> :GodotRun<CR>
  autocmd FileType   gdscript map <buffer> <F9> :GodotRunCurrent<CR>
  autocmd FileType   gdscript map <buffer> <leader>d :GodotDocs<CR>
  autocmd BufRead    *.gdip   setlocal filetype=gdresource
  autocmd BufNewFile *.gdip   setlocal filetype=gdresource

  " Git
  autocmd FileType git       setlocal foldlevel=99
  autocmd FileType gitcommit setlocal bufhidden=delete
  autocmd FileType gitcommit setlocal spell
  autocmd FileType gitcommit iabbrev  <buffer> bps bp_skip_tests
  autocmd FileType gitrebase setlocal bufhidden=delete
  autocmd FileType gitrebase setlocal spell

  " GLSL
  autocmd BufRead    *.vert,*.tesc,*.tese,*.glsl,*.geom,*.frag,*.comp,*.rgen,*.rmiss,*.rchit,*.rahit,*.rint,*.rcall set filetype=glsl
  autocmd BufNewFile *.vert,*.tesc,*.tese,*.glsl,*.geom,*.frag,*.comp,*.rgen,*.rmiss,*.rchit,*.rahit,*.rint,*.rcall set filetype=glsl

  " Javascript
  autocmd FileType javascript,javascriptreact setlocal tabstop=4
  autocmd FileType javascript,javascriptreact setlocal shiftwidth=4
  autocmd FileType javascript,javascriptreact setlocal foldlevel=99
  autocmd FileType javascript,javascriptreact setlocal suffixesadd=.js,.jsx,.ts,.tsx
  autocmd FileType javascript,javascriptreact compiler eslint
  autocmd FileType javascript,javascriptreact map <buffer> <localleader>r :Dispatch -compiler=make node %<CR>
  autocmd FileType javascript,javascriptreact EmmetInstall

  " JSON/JSONC
  autocmd FileType json,jsonc setlocal foldlevel=99
  autocmd FileType json,jsonc setlocal conceallevel=2

  " Markdown
  autocmd FileType markdown setlocal foldlevel=99

  " TypeScript
  autocmd FileType typescript,typescriptreact setlocal tabstop=2
  autocmd FileType typescript,typescriptreact setlocal shiftwidth=2
  autocmd FileType typescript,typescriptreact setlocal foldlevel=99
  autocmd FileType typescript,typescriptreact setlocal suffixesadd=.js,.jsx,.ts,.tsx
  autocmd FileType typescript,typescriptreact compiler tsc
  autocmd FileType typescript,typescriptreact map <buffer> <localleader>e :Dispatch -compiler=eslint<CR>
  autocmd FileType typescript,typescriptreact EmmetInstall

  " YAML
  autocmd FileType yaml setlocal foldlevel=99

augroup END
" }}}

" vim: set sw=2 ts=2 sts=0 expandtab fdm=marker :nospell:
