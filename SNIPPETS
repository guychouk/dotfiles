# gpg sign encrypt
gpg --output message.txt.sig --sign message.txt

# gpg decrypt
gpg --output recovered_message.txt --decrypt message.txt.gpg

# add s3 bucket to localstack
aws --endpoint-url=http://localhost:4566 s3 mb s3://BUCKET

# mongo shell query to fetch specific element from an array in a document
db.organizations.aggregate([ { $match:{} }, { $project: { nameOfField: { $filter: { input: "$nameOfField", as:"tmp", cond: { $eq: [ "$$tmp.prop", "query" ] } } } } } ])

# random 32 character string
cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 32 | head -n 1

# compress iOS scanned PDFs
gs -sDEVICE=pdfwrite -sPAPERSIZE=a4 -dPDFFitPage -dPDFSETTINGS=/ebook -o output.pdf -q input.pdf

# split PDF
gs -sDEVICE=pdfwrite -dSAFER -dFirstPage=1 -dLastPage=3 -o output.pdf -q input.pdf

# merge PDFs
gs -sDEVICE=pdfwrite -o output.pdf -q input-01.pdf input-02.pdf

# pack files into ZIP
find . -type f -name '*.png' -exec zip output.zip {} +

# resize image
convert input.png -resize 32x32 output-32x32.png

# scale image
convert input.png -filter point -resize 64x64 output-64x64.png

# generate blank image
convert -size 32x32 xc:white output-blank.png

# pack images to spritesheet
montage *.png -tile 4x -geometry +0+0 spritesheet.png

# generate icon from image
convert input-1024x1024.png -define icon:auto-resize=64,48,32,16 output

# pad image
convert input.png -background none -gravity center -resize 64x64 -extent 32x32 output.png

# convert PDF to PNG
convert -density 300 input.pdf -resize 35% output.png

# speed up GIF
convert -delay 1x30 output.gif fast.gif

# convert 1024x1024 PNG to multiple sizes
convert icon.png -strip -interlace Plane -resize "1024x>" -write Icon-1024.png -resize "180x>" -write Icon-180.png -resize "167x>" -write Icon-167.png -resize "152x>" -write Icon-152.png -resize "120x>" -write Icon-120.png -resize "80x>" -write Icon-80.png -resize "76x>" -write Icon-76.png -resize "40x>" Icon-40.png

# convert video to GIF
GIF_SETTINGS='fps=10,scale=860:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse' ffmpeg -i input.mov -vf $GIF_SETTINGS -loop 0 output.gif

# cut video from time to #ffmpeg
ffmpeg -i input.mp4 -ss 00:00:01 -to 00:00:05 -c copy output.mp4

# cut video by timeframe with subtitles with ffmpeg
ffmpeg -i input.mp4 -ss 00:00:01 -to 00:00:05 -copyts -vf subtitles=file.srt -c:a copy output.mp4

# extract subtitles from video with ffmpeg
ffmpeg -i input.mkv -map 0:s:0 output.srt

# convert GIF to mp4 with ffmpeg
ffmpeg -i input.gif -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" output.mp4

# crop video with ffmpeg
ffmpeg -i input.mp4 -filter:v "crop=${W}:${H}:${X}:${Y}" output.mp4

# list supported devices for recording with ffmpeg
ffmpeg -f avfoundation -list_devices true -i ""

# record whole screen
ffmpeg -f avfoundation -i "1" -framerate 30 "screen-recording-$(date +"%m-%d-%y").mkv"

# create Kafka topic
kafka-topics.sh --create --topic <topic> --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1

# export MongoDB collection by query
mongoexport --quiet --uri="mongodb://localhost:27017" --collection=<collection> -q '' | jq '.'

# publish message to exchange using RabbitMQ API
curl -u test:rabbitmq 'http://localhost:15672/api/exchanges/%2F/<exchange>/publish' --data-raw '{"vhost":"/","name":"<exchange>","properties":{"delivery_mode":2,"headers":{"consistent-hash":""}},"routing_key":"100","delivery_mode":"2","payload":"{}","headers":{"consistent-hash":""},"props":{},"payload_encoding":"string"}'

# download RabbitMQ CLI from local instance
curl -O http://localhost:15672/cli/rabbitmqadmin

# run RabbitMQ DOCKER container
FROM rabbitmq:3.9.12-management\nRUN rabbitmq-plugins enable rabbitmq_consistent_hash_exchange rabbitmq_delayed_message_exchange

# run nodemon with ts-node and debugging
nodemon --watch src --exec 'node --require ts-node/register --inspect' src/app.ts

# scrape IMGs from HTML page using html-xml-utils.
curl -s $1 | hxwls | grep -E "(jpg|png)" | grep -v thumb | xargs -I{} curl -s -O {}

# curl Kubernetes API Server from a Pod
curl -k -X GET -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_PORT_443_TCP_ADDR:$KUBERNETES_SERVICE_PORT_HTTPS

# push new tag to Github
git tag -a $TAG -m $TAG && git push origin refs/tags/$TAG

# run Kafka UI in Kubernetes
kubectl run kafka-ui --image=provectuslabs/kafka-ui --env="KAFKA_CLUSTERS_0_NAME=local" --env="KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092" --env="DYNAMIC_CONFIG_ENABLED=true" --restart=Never -- java -jar ./kafka-ui-api.jar

# spreadsheets formula for calculating monthly expenses based on my Finances sheet
=ArrayFormula({ { unique(text(filter('2022'!F2:F,'2022'!F2:F<>""),"MMMM")) }, { sumif( text(filter('2022'!F2:F,'2022'!F2:F<>""),"MMMM"), unique(text(filter('2022'!F2:F,'2022'!F2:F<>""),"MMMM")), '2022'!B2:B) } })

# reset Kafka topic offset to latest
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group <group> --topic <topic> --reset-offsets --to-latest

# focus on single screen with displayplacer
displayplacer "id:69734272 enabled:false"

# set environment variable with secret from pass with error redirection
export SECRET=$(pass show secret 2>/dev/null)
